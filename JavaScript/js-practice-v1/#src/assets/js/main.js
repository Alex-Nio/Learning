"use strict"; // Показывает что в документе используется современный формат

console.log('JavaScript Ready'); // Указывает на то что JavaScript подключён 

// -----------------------------------------------
// Функционал Страницы

// Кнопка

$('.is-trigger').on('click', function(e) {
	$('.trigger-content').slideToggle("slow");
});

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Простое сложение. Урок 1
console.log('=========================================');
console.log('=*=*=*=*=*=*=*=  Lesson 1 =*=*=*=*=*=*=*=');
console.log('=========================================');

// Сумма числовых переменных

let a = 10,
    b = 10,
    c = 10;

let summ = a + b + c;


 console.log('Lesson 1:');
 console.log(summ);

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Сложение строковых типов данных. Урок 2
console.log('=========================================');
console.log('=*=*=*=*=*=*=*=  Lesson 2 =*=*=*=*=*=*=*=');
console.log('=========================================');

// Сумма строковых переменных

let d = 'Hellow',
    e = ' World!';

let summ2 = d + e;

 console.log('Lesson 2:');
 console.log(summ2);

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Что такое объект? Урок 3
console.log('=========================================');
console.log('=*=*=*=*=*=*=*=  Lesson 3 =*=*=*=*=*=*=*=');
console.log('=========================================');

// Объекты

let obj = {
	name: 'Alex',
	surname: 'Fox',
	age: 27,
	isMarried: false
};


console.log(obj);

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Что такое массив? Урок 4


// Массив (является частным случаем объекта)

let arr = [ "Index0", "Index1", "Index2", "Index3" ];

console.log('=========================================');
console.log('=*=*=*=*=*=*=*=  Lesson 4 =*=*=*=*=*=*=*=');
console.log('=========================================');

// Индексация начинается с нуля
console.log(arr[0]);
console.log(arr[1]);
console.log(arr[2]);
console.log(arr[3]);

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Что такое Интерполяция? Урок 5


// Интерполяция (сложение/склейка строк)

let user = 'Alex';

console.log('=========================================');
console.log('=*=*=*=*=*=*=*=  Lesson 5 =*=*=*=*=*=*=*=');
console.log('=========================================');

console.log(`hellow,${user}!`);


// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Унарный плюс и его особенности. Урок 6


// Унарный плюс. Переделывает строчный тип данных на числовой

let f = 1,
    j = "1";

console.log('=========================================');
console.log('=*=*=*=*=*=*=*=  Lesson 6 =*=*=*=*=*=*=*=');
console.log('=========================================');

// Добавляем переменной j унарный плюс j строчная становится числовым типом данных
console.log("result f+j=" + (f + +j));

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Операторы. Инкремент и Декремент. Урок 7


// Инкремент и Декремент

let incr = 10,
	 decr = 10;

// Если после то постфиксная запись
// Если перед то префиксная запись
// Разница: Если префикс то сперва срабатывает операция, если постфиксная то сначала число попадёт в консоль, а уже потом число будет изменяться

incr++; // Увеличиваем число в переменной на 1
decr--; // Уменьшаем число в переменной на 1


console.log('=========================================');
console.log('=*=*=*=*=*=*=*= Lesson 7 ==*=*=*=*=*=*=*=');
console.log('=========================================');

console.log(incr,decr);


// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Прострое равенство и строгое сравнение. Урок 8
console.log('=========================================');
console.log('=*=*=*=*=*=*=*== Lesson 8 =*=*=*=*=*=*=*=');
console.log('=========================================');


console.log(2*2 == '4'); // Вернёт true т.к. 4-строчная. Работает проверка ТОЛЬКО по значению
console.log(2*2 === '4'); // Вернёт false т.к. 4-строчная. Работает проверка и по значению и по типу данных


// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Операторы "И" и "Или". Урок 9

// && // "И" Работает если два или более являются true
// || // "Или" Работает если хотя бы один из всех-true

console.log('=========================================');
console.log('=*=*=*=*=*=*=*== Lesson 9 =*=*=*=*=*=*=*=');
console.log('=========================================');

let ifChecked = true,
	 ifClosed = true;


	 console.log("И тот и другой верны: " + (ifChecked && ifClosed));

let ifChecked2 = false,
	  ifClosed2 = true;

	 console.log("Один из неверно: " + (ifChecked2 || ifClosed2));


// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 10.Пишем своё первое приложение.

/* Задание на урок:

1) Создать переменную numberOfFilms и в неё поместить ответ от пользователя на вопрос:
'Сколько фильмов вы уже посмотрели?'

2) Создать объект personalMovieDB и в него поместить такие свойства:
    - count - сюда передается ответ на первый вопрос
    - movies - в это свойство поместить пустой объект
    - actors - тоже поместить пустой объект
    - genres - сюда поместить пустой массив
    - privat - в это свойство поместить boolean(логическое) значение false

3) Задайте пользователю по два раза вопросы:
    - 'Один из последних просмотренных фильмов?'
    - 'На сколько оцените его?'
Ответы стоит поместить в отдельные переменные
Записать ответы в объект movies в формате: 
    movies: {
        'logan': '8.1'
    }

Проверить, чтобы все работало без ошибок в консоли */


// Решение.

// 1 Задание:

// const numberOfFilms = +prompt("Сколько фильмов вы уже посмотрели?", '');


// // 2 Задание:

// let myArr = [],
// 	 emptyObj = {},
// 	 emptyObj2 = {};

// const personalMovieDB = {
// 	count: numberOfFilms,
// 	movies: emptyObj,
// 	actors: emptyObj2,
// 	genres: myArr,
// 	privat: false
// }

// // 3 Задание:

// const ask1 = prompt('Один из последних просмотренных фильмов?', ''),
// 		ask2 = prompt('На сколько оцените его?', ''),
// 		ask3 = prompt('Один из последних просмотренных фильмов?', ''),
// 		ask4 = prompt('На сколько оцените его?', '');

// personalMovieDB.movies[ask1] = ask2;
// personalMovieDB.movies[ask3] = ask4;


// console.log(personalMovieDB);

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Условия JavaScript.Урок 11.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 11==*=*=*=*=*=*=*=');
console.log('=========================================');

if (4 == 4) {
	console.log('Всё верно. 4 равно 4');
} else {
	console.log('Ошибка');
}

// Тернарный оператор. По простому "Тернарка".
// Участвуют три аргумента

let num = 50;

(num === 50) ? console.log('Ok!') : console.log('Error');


// Switch.Проверка на СТРОГОЕ соответствие.

switch(num) {
	case 49:
		console.log('Неверно');
		break;
	case 50:
		console.log('Верно!');
		break;
	default:
		console.log('Не в этот раз');
		break;
}

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Циклы.Урок 12.

// let number = 1;

// while(number < 10) {
// 	console.log(number);
// 	number++;
// }

// do {
// 	console.log(number);
// 	number++;
// }

// while (number < 10);

// for (let i = 1; i < 8; i++) { // Цикл.
// 	if (i === 6) { // Условие.
// 		break; // Прерывание цикла досрочно
// 	}

// 	console.log(i);
// }

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 13.Практика.

/* Задание на урок:

1) Автоматизировать вопросы пользователю про фильмы при помощи цикла

2) Сделать так, чтобы пользователь не мог оставить ответ в виде пустой строки,
отменить ответ или ввести название фильма длинее, чем 50 символов. Если это происходит - 
возвращаем пользователя к вопросам опять

3) При помощи условий проверить  personalMovieDB.count, и если он меньше 10 - вывести сообщение
"Просмотрено довольно мало фильмов", если от 10 до 30 - "Вы классический зритель", а если больше - 
"Вы киноман". А если не подошло ни к одному варианту - "Произошла ошибка"

4) Потренироваться и переписать цикл еще двумя способами*/

// Решение.

// 1 Задание:

// const numberOfFilms = +prompt("Сколько фильмов вы уже посмотрели?", '');

// let myArr = [],
// 	 emptyObj = {},
// 	 emptyObj2 = {};

// const personalMovieDB = {
// 	count: numberOfFilms,
// 	movies: emptyObj,
// 	actors: emptyObj2,
// 	genres: myArr,
// 	privat: false
// }

// // Решение.

// for (let i = 0; i < 2; i++) { // Цикл.
// 	const ask1 = prompt('Один из последних просмотренных фильмов?', ''),
// 			ask2 = prompt('На сколько оцените его?', '');

// 	if(ask1 != null && ask2 != null && ask1 != '' && ask2 != '' && ask1.length < 50) {
// 		personalMovieDB.movies[ask1] = ask2;
// 		console.log('done!');
// 	} else {
// 		console.log('error -___-');
// 		i--;
// 	}
// }

// if (personalMovieDB.count < 10) {
// 	alert("Просмотрено довольно мало фильмов");
// } else if (personalMovieDB.count > 10 && personalMovieDB.count < 30) {
// 	alert("Вы классический зритель");
// } else if (personalMovieDB.count >= 30) {
// 	console.log("Вы киноман!");
// } else {
// 	alert("Error!!!");
// }

// console.log(personalMovieDB);

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 14.Функции.
// Функция работает локально. Т.е. если назначить любую переменную внутри функции, то она будет работать только внутри функции.
// Если переменную назначить глобально, т.е. ВНЕ функции и вызвать переменную внутри функции, то она будет воспринимтаься глобально.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 14==*=*=*=*=*=*=*=');
console.log('=========================================');

// Декларативная функция. Существует ещё до прогрузки страницы.

function showFirstMessage() {
	console.log('function active');
}

showFirstMessage();

function ret() { 
	let num = 40;

	return num;
}

const retResult = ret();

console.log(retResult);

// Экспрессивная функция. Работает только тогда, когда до неё доходит поток кода.

const logger = function() {
	console.log('this is func expression');
};

logger();

// Стрелочная функция. Не имеет своего контекста.(this)

const calc = (a, b) => { 
	return a + b
};

console.log(calc);

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 15.Методы и свойства строк и чисел.
console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 15==*=*=*=*=*=*=*=');
console.log('=========================================');

const str = "test";

// length-свойство элемента
// console.log(str.length);

// Команда выводит элемент ввиде объекта
// console.dir();

// Методы изменения регистра
console.log(str.toUpperCase());
// Прим.: При использовании метода всегда пользуемся круглыми скобками в конце метода ()

const fruit = "Some fruit";

console.log(fruit.indexOf("fruit"));
// Прим.: Индексация начинается с нуля

// Если строка не изменяема, как можно её поменять?
const logg = "Hello world!";

console.log(logg.slice(6, 11));

console.log(logg.substring(6, 11));

// Прим.: Чтобы увидеть числовые методы нужно прописать в консоли Math.
const numb = 12.2;

// Метод округления числа
console.log(Math.round(numb));

const test = "12.2px";

// ParseInt() переводит число в другую систему счисления
console.log(parseInt(test));

// ParseFloat() переводит число в другую систему счисления вместе с плавающей точкой в десятичной системе счисления
console.log(parseFloat(test));

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 16.Практическое задание.

/* Задание на урок:

1) Первую часть задания повторить по уроку

2) Создать функцию showMyDB, которая будет проверять свойство privat. Если стоит в позиции
false - выводит в консоль главный объект программы

3) Создать функцию writeYourGenres в которой пользователь будет 3 раза отвечать на вопрос 
"Ваш любимый жанр под номером ${номер по порядку}". Каждый ответ записывается в массив данных
genres

P.S. Функции вызывать не обязательно*/

// let numberOfFilms;

// console.log('Lesson 16:');

// function start() {
// 	numberOfFilms = +prompt("Сколько фильмов вы уже посмотрели?", '');

// 	while (numberOfFilms == '' || numberOfFilms == null || isNaN(numberOfFilms)) {
// 		numberOfFilms = +prompt("Сколько фильмов вы уже посмотрели?", '');
// 	}
// }

// start(); // Вызов функции

// // Прим.:метод isNaN указывает на то, что будет возвращено НЕ ЧИСЛО.

// let myArr = [],
// 	 emptyObj = {},
// 	 emptyObj2 = {};

// const personalMovieDB = {
// 	count: numberOfFilms,
// 	movies: emptyObj,
// 	actors: emptyObj2,
// 	genres: myArr,
// 	privat: false
// }

// function rememberMyFilms(){
// 	for (let i = 0; i < 2; i++) { // Цикл.
// 		const ask1 = prompt('Один из последних просмотренных фильмов?', ''),
// 				ask2 = prompt('На сколько оцените его?', '');

// 		if(ask1 != null && ask2 != null && ask1 != '' && ask2 != '' && ask1.length < 50) {
// 			personalMovieDB.movies[ask1] = ask2;
// 			console.log('done!');
// 		} else {
// 			console.log('error -___-');
// 			i--;
// 		}
// 	}
// }

// rememberMyFilms();


// function detectPersonalLevel() {
// 	if (personalMovieDB.count < 10) {
// 		alert("Просмотрено довольно мало фильмов");
// 	} else if (personalMovieDB.count > 10 && personalMovieDB.count < 30) {
// 		alert("Вы классический зритель");
// 	} else if (personalMovieDB.count >= 30) {
// 		console.log("Вы киноман!");
// 	} else {
// 		alert("Error!!!");
// 	}
// }

// detectPersonalLevel();


// // Задание 2.

// function showMyDB(){
// 	if(personalMovieDB.privat == false) {
// 		console.log(personalMovieDB);
// 	} else {

// 	}
// }

// showMyDB();

// // Задание 3.

// function writeYourGenres() {
// 	for (var i = 1; i <= 3; i++) {
// 		personalMovieDB.genres[i - 1] = prompt(`Ваш любимый жанр под номером ${i}`);
// 	}
// }

// writeYourGenres();

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 17.Callback функции.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 17==*=*=*=*=*=*=*=');
console.log('=========================================');


// function first() {
// 	setTimeout(function() {
// 		console.log(1);
// 	}, 500);
// }

// function second(){
// 	console.log(2);
// }

// first();
// second();

// Т.е. не смотря на позицию функции в коде результат выполнения может быть не в таком же порядке

function learnJS(lang, callback) {
	console.log(`Я учу ${lang}`);
	callback();
}

learnJS('JavaScript', function() {
	console.log('Я прошел этот урок!');
})

// Callback позволяет убедиться в том, что исполнение определенного кода начнётся только тогда, когда выполнится основной/желаемый код

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 18.Объекты и их деструктуризация.
console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 18==*=*=*=*=*=*=*=');
console.log('=========================================');

// Наш объект
const options = {
	name: 'test',
	width: 1024,
	height: 1024,
	colors: {
		border: 'black',
		bg: 'red'
	},
	makeTest: function() {
		console.log('функция makeTest активна');
	}
};

// Выводим значение свойства name объекта options
console.log(options.name);

// Убираем свойство name из объекта options
delete options.name;

// Выводим все свойства нашего объекта options
console.log(options);

// Функции и методы которые имеются внутри объекта.
// Запускаем метод makeTest объекта options
options.makeTest();

// -----------------------------------------------
// let optionsCount = 0; // считаем количество свойств
// -----------------------------------------------

// Деструктуризация это стандарт ES6, который позволяет достучаться до вложенных свойств объекта и использовать их в качестве отдельных структур.

// Разделяем на более мелкие структуры
const {border, bg} = options.colors;
console.log(border);
console.log('Деструктуризация удалась!');


// Перебор всех свойств объекта и перебор объекта внутри объекта :D 

for (let key in options) {

	if(typeof(options[key]) === 'object') {
		console.log('Мы можем перебирать объекты внутри объекта');

		for (let i in options[key]) {
			console.log(`Свойство ${key} имеет значение ${options[key][i]}`);
			// optionsCount++;
		}

	} else {
		console.log(`Свойство ${key} имеет значение ${options[key]}`);
		// optionsCount++;
	}

}

// -----------------------------------------------
// console.log("У нашего объекта " + optionsCount + " свойства");
// -----------------------------------------------

// Или

// -----------------------------------------------
// console.log(Object.keys(options).length); // Обязательно с большой буквы!!!
// -----------------------------------------------

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 19. Массивы и псевдомассивы. Методы Массивов.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 19==*=*=*=*=*=*=*=');
console.log('=========================================');

const myArray = [1, 2, 3, 6, 8];

// Метод pop удаляет последний элемент массива
myArray.pop();
// Метод push добавляет последний элемент массива
myArray.push(10);

console.log(myArray);

// У каждого элемента массива есть свой номер т.е. индекс

// Перебор массива 1 способ
// for (let i = 0; i < myArray.length; i++) {
// 	console.log(myArray[i]);
// }

// Перебор массива 2 способ, работает только с массивоподобными сущностями и можно использовать break и continue в цикле
// for (let value of myArray) {
// 	console.log(value);
// }

// Свойство langth состоит из последнего элемента массива +1
// myArray[99] = 0; // Нарушаем логику
// console.log(myArray.length);

// Ещё один, более настраиваемый способ перебора
// Функция имеет три аргумента аргумент, номер, колбэк
myArray.forEach(function(item, i, arr) {
	console.log(`${i}: ${item} внутри массива ${myArray}`);
});

// Другие методы split join sort:

// const prod = prompt("", "");
// const products = prod.split(","); // Пропуск
// console.log(products);
// console.log(products.join(';')); // Объединение элементов массива

myArray.sort(compareNum); // Сортировка элементов.Может принимать callback функцию

function compareNum(a, b) {
	return a - b; // Алгоритм быстрой сортировки.
}

console.log(myArray);

// Понятие псевдомассива: Объект структура которого совпадает со структурой массива, но не имеет никаких методов.

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 20.Передача данных по ссылке и значению

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 20==*=*=*=*=*=*=*=');
console.log('=========================================');

let u = 5,
	 o = a;

o = o + 5;

console.log(u);
console.log(o);

const testObj = {
	a: 5,
	b: 1
};

// Передаёт ссылку, а не копирует объект
// const copy = testObj;

// Модифицируем сам объект
// copy.a = 10;

// Если мы заменяем значение свойства объекта то будет выводится то значение, которое мы подставляем
// console.log(copy);
// console.log(testObj);

// Копируем свойства из объекта
function copy(mainObj) {
	let objCopy = {};

	let key;
	for(key in mainObj) {
		objCopy[key] = mainObj[key];
	}

	return objCopy;
}

const numbers = {
	a: 2,
	b: 5,
	c: {
		x: 7,
		y: 4
	}
};

// Называется поверхностной копией объекта
const newNumbers = copy(numbers);

newNumbers.a = 10;

// Меняем значение свойства обекта внутри нашего объекта обращаясь к нему
newNumbers.c.x = 10;

console.log(numbers);
console.log(newNumbers);

const add = {
	d: 17,
	e: 10
};

// Объединяем два объекта в один
console.log(Object.assign(numbers, add));

// Меняем ключ в клоне
const clone = Object.assign({}, add);
clone.d = 20;

console.log(add);
console.log(clone);


// Тоже самое с массивом
const oldArray = ['a', 'b', 'c'];
const newArray = oldArray.slice();

newArray[1] = 'Измененый элемент';

console.log(newArray);
console.log(oldArray);

const video = ['youtobe', 'vimeo', 'rutube'],
		blogs = ['wordpress', 'livejournal', 'blogger'],
		internet = [...video, ...blogs]; // Развёртка методом spread (Оператор разворота)

console.log(internet);

// -----------------------------------------------

function log(a, b, c) {
	console.log(a);
	console.log(b);
	console.log(c);
}

// Создаём сущности
const data = [2, 5, 7];

// Передаём сущности в функцию
log(...data);

// -----------------------------------------------

const nextArray = ["a", "b"];

const nextNewArray = [...nextArray];

console.log(nextArray);
console.log(nextNewArray);

const q = {
	one: 1,
	two: 2
};

const newObj = {...q};

console.log(newObj);

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 21. Основы ООП, прототипно-ориентированное наследование.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 21==*=*=*=*=*=*=*=');
console.log('=========================================');

const soldier = {
	health: 500,
	armor: 100,
	sayHello: function() {
		console.log('Hello!');
	}
};

// const john = {
// 	health: 100
// };

// Устанавливаем прототип объекта
const john = Object.create(soldier);

// Получаем прототип объекта джона от солдата
// Object.setPrototypeOf(john, soldier);

john.sayHello();


// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 22.Практика.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 22==*=*=*=*=*=*=*=');
console.log('=========================================');

/* Задание на урок:

1) У нас уже есть рабочее приложение, состоящее из отдельных функций. Представьте, что
перед вами стоит задача переписать его так, чтобы все функции стали методами объекта personalMovieDB
Такое случается в реальных продуктах при смене технологий или подхода к архитектуре программы

2) Создать метод toggleVisibleMyDB, который при вызове будет проверять свойство privat. Если оно false - он
переключает его в true, если true - переключает в false. Протестировать вместе с showMyDB.

3) В методе writeYourGenres запретить пользователю нажать кнопку "отмена" или оставлять пустую строку. 
Если он это сделал - возвращать его к этому же вопросу. После того, как все жанры введены - 
при помощи метода forEach вывести в консоль сообщения в таком виде:
"Любимый жанр #(номер по порядку, начиная с 1) - это (название из массива)"*/

// Решение.

// let myArr = [],
// 	 emptyObj = {},
// 	 emptyObj2 = {};

// const personalMovieDB = {
// 	count: 0,
// 	movies: emptyObj,
// 	actors: emptyObj2,
// 	genres: myArr,
// 	privat: false,
// 	start: function(){
// 		personalMovieDB.count = +prompt("Сколько фильмов вы уже посмотрели?", '');

// 		while (personalMovieDB.count == '' || personalMovieDB.count == null || isNaN(personalMovieDB.count)) {
// 			personalMovieDB.count = +prompt("Сколько фильмов вы уже посмотрели?", '');
// 		}
// 	},
// 	rememberMyFilms: function(){
// 		for (let i = 0; i < 2; i++) { // Цикл.
// 			const ask1 = prompt('Один из последних просмотренных фильмов?', ''),
// 					ask2 = prompt('На сколько оцените его?', '');

// 			if(ask1 != null && ask2 != null && ask1 != '' && ask2 != '' && ask1.length < 50) {
// 				personalMovieDB.movies[ask1] = ask2;
// 				console.log('done!');
// 			} else {
// 				console.log('error -___-');
// 				i--;
// 			}
// 		}
// 	},
// 	detectPersonalLevel: function(){
// 		if (personalMovieDB.count < 10) {
// 			alert("Просмотрено довольно мало фильмов");
// 		} else if (personalMovieDB.count > 10 && personalMovieDB.count < 30) {
// 			alert("Вы классический зритель");
// 		} else if (personalMovieDB.count >= 30) {
// 			console.log("Вы киноман!");
// 		} else {
// 			alert("Error!!!");
// 		}
// 	},
// 	showMyDB: function(){
// 		if(personalMovieDB.privat == false) {
// 		console.log(personalMovieDB);
// 		} else {

// 		}
// 	},
// 	toggleVisibleMyDB: function(){
// 		if(personalMovieDB.privat == false) {
// 			personalMovieDB.privat == true;
// 		} else {
// 			personalMovieDB.privat == false;
// 		}
// 	},
// 	writeYourGenres: function(){
// 		for (var i = 1; i <= 3; i++) {
// 			let genre = prompt(`Ваш любимый жанр под номером ${i}`);
			
// 			if(genre === '' || genre == null){
// 				console.log('Вы ввели некорректные данные или не ввели их вообще');
// 				i--;
// 			} else {
// 				personalMovieDB.genres[i - 1] = genre;
// 			}
// 		}

// 		personalMovieDB.genres.forEach((item, i) => {
// 			console.log(`Любимый жанр ${i + 1} - это ${item}`);
// 		});
// 	}
// };

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 23.Практика.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 23==*=*=*=*=*=*=*=');
console.log('=========================================');


// To string
console.log(typeof(String(4)));


// Конкатенация строк т.е. при сложении со строкой получается строка.
console.log(typeof(5 + ''));

// Пример старого способа конкатенации строк:
// 1.

const number1 = 5;

console.log("https://vk.com/catalog/" + number1);

// 2.

const fontSize = 26 + 'px';

console.log(fontSize);

// To number.Перевод в число

// 1.
console.log(typeof(Number('4')));

// 2.
console.log(typeof(+'5'));

// 3.
console.log(typeof(parseInt("15px", 10)));

// let answ = +prompt("Введите слово и мы преобразуем его в число", "");

// To boolean. Преобразование в булевой тип.

// False всегда 0,'', null, undefined, NaN;

let switcher = null;

if (switcher) {
	console.log('Working');
}


// 1
// Если изменяем переменную

switcher = 1;

if (switcher) {
	console.log('Working'); 
	// т.е. вернёт boolean
}

// 2
console.log( typeof(Boolean('4')));
// также вернёт boolean


// 3

console.log(typeof(!!"4444"));
// также вернёт boolean


// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 24.Задачи на повторение.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 24==*=*=*=*=*=*=*=');
console.log('=========================================');

// 1.
let x = 5;
console.log(x++); // Вернёт сперва 5 потом увеличит на 1
console.log(++x); // Вернёт сразу увеличенное значение

console.log(typeof([] + false)); // Вернёт false
console.log([] + false - null); // Вернёт NaN т.е. не число
console.log([] + false - null + true); // Вернёт NaN т.е. не число

// 2.

let y = 1;
let x2 = y = 2; // Присваивание идёт справа налево
console.log(x2);

// 3.

console.log([] + 1 + 2); // Получится "12" в виде строки

// 4.

console.log("1"[0]); // Обращаемся к индексу, верёт "1"


// 5.
console.log(2 && 1 && null && 0 && undefined); // Вернёт null т.к. код при операторе && возвращается тогда когда значение будет False. Запинается на лжи


// 6.
console.log(!!( a && b ) === (a && b)); // Превратит выражение в булиновое и вернёт false


// 7.
console.log(( null || 2 && 3 || 4 )); // Вернёт последнее правдивое логическое значение т.е. 3
// См.таблицу приорететов операторов
// "ИЛИ" запинается на правде

// 8. Правда ли что a == b ?

// a = [1, 2, 3];
// b = [1, 2, 3];

// Нет.НЕ равны т.к. это две переменные с одинаковыми данными


// 9.
console.log( +"Infinity" );
// Выведет Infinity но тип данных будет числом т.к. преобразован унарным плюсом

// 10.
// Верно ли сравнение: "Ёжик" > "яблоко"?
// Не верно т.е. сравнение идёт посимвольно. Зависит от юникода символов

// 11.
// Чему равно 0 || "" || 2 || undefined || true || falsе ?

// Будет равно 2 т.к. ИЛИ запинается на правде

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 25.Получение элементов на странице.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 25==*=*=*=*=*=*=*=');
console.log('=========================================');


const box = document.getElementById('box'); // id может быть только один на странице.

console.log(box);

const btns = document.getElementsByTagName('button'); // Получим псевдомассив!
// const btns = document.getElementsByTagName('button')[1]; // Получим вторую кнопку с псевдомассива по инднексу

// или

// console.log(btns[1]);

const circles = document.getElementsByClassName('circle');
console.log(circles);


// Современные методы:

const hearts = document.querySelectorAll('.heart'); // Точка обязательна! + доступен метод forEach
console.log(hearts);

// hearts.forEach(item => {
// 	console.log(item);
// 	});

const oneHeart = document.querySelector('.heart');
console.log("Это только один элемент. Первый на странице");
console.log(oneHeart);

// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------
// Урок 26.Действия с элементами на странице.

console.log('=========================================');
console.log('=*=*=*=*=*=*=*==Lesson 26==*=*=*=*=*=*=*=');
console.log('=========================================');


// Добавление inline-стилей
// box.style.backgroundColor = 'blue';
// box.style.borderRadius = '50%';

btns[1].style.borderRadius = '100%';


// Назначение стилей для всех сразу
box.style.cssText = 'background-color: red';
// box.style.cssText = `background-color: red; width: 30px`;

// С помощью цикла в массиве
// for (var i = 0; i < hearts.length; i++) {
// 	hearts[i].style.cssText = `background-color: blue;` 
// }

// Другой способ. через Метод.
// hearts.forEach(item => {
// 	item.style.backgroundColor = 'blue';
// });

// Создание элементов.
const div = document.createElement('div');
// const text = document.craateTextNode('Тут был я');

div.classList.add('black');

// Манипуляции с DOM:
// Вставляем div в body
document.body.append(div);

// Вставляем элемент куда нам надо.
// Находим все селекторы, берем второй элемент из массива и вставляем туда наш div с классом black
document.querySelectorAll('.lesson__content')[1].append(div); // Вставляем в конец
document.querySelectorAll('.lesson__content')[1].prepend(div); // Вставляем в начало
// либо
document.querySelectorAll('.lesson__content')[1].before(div); // Вставляем в начало
document.querySelectorAll('.lesson__content')[1].after(div); // Вставляем в конец

// Удаляем элемент
circles[0].remove();

// Заменяем элемент другим
hearts[1].replaceWith(circles[0]);

// Не забываем про точку!!!
const wrapper = document.querySelector('.wrapper');

// Ещё способ перемещения элемента
wrapper.appendChild(div);

// СТАРЫЕ СПОСОБЫ:
wrapper.insertBefore(div, hearts[0]);

// Добавление своей структуры в HTML структуру
div.innerHTML = "<h1>Hellow World!</h1>";

// 2 Варинт. Работает ТОЛЬКО с ТЕКСТОМ! 
// div.textContent = "qq!"


// КОМБО Всего из перечисленного:
// 1. Указываем элемент
// 2. Указываем структуру
div.insertAdjacentHTML('beforebegin', '<h2>Hello</h2>'); // Перед началом
div.insertAdjacentHTML('afterbegin', '<h2>Hello</h2>'); // После начала
div.insertAdjacentHTML('beforeend', '<h2>Hello</h2>'); // Перед концом
div.insertAdjacentHTML('afterend', '<h2>Hello</h2>'); // После конца


// -----------------------------------------------
// -----------------------------------------------
// -----------------------------------------------

